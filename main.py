import os
import random
from uuid import uuid4
from dotenv import load_dotenv

from telegram import InlineQueryResultPhoto
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
)

# –î–ª—è –ª–æ–∫–∞–ª–∫–∏ —á–∏—Ç–∞–µ–º .env; –Ω–∞ Fly –∏—Å–ø–æ–ª—å–∑—É–µ–º Secrets
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
EMOJIS = ["‚ú®", "üåü", "üçÄ", "üåà", "üí´", "üßø", "ü™Ñ", "üéâ", "‚òÄÔ∏è", "üå∏"]

def _load_images():
    env = (os.getenv("IMAGES") or "").strip()
    if env:
        return [u.strip() for u in env.split(",") if u.strip()]
    # –∑–∞–ø–∞—Å–Ω—ã–µ, –ª—É—á—à–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ —á–µ—Ä–µ–∑ IMAGES
    return [
        "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee",
        "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429",
    ]

IMAGES = _load_images()

# –ü—Ä–µ–≤—å—é –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞: –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–º PREVIEW_URL,
# –∏–Ω–∞—á–µ –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ IMAGES.
PREVIEW_URL = os.getenv("PREVIEW_URL") or (IMAGES[0] if IMAGES else None)

def username_or_name(user) -> str:
    if user.username:
        return f"@{user.username}"
    name = (user.first_name or "").strip() or "–ì–æ—Å—Ç—å"
    return name

def make_caption(for_user) -> str:
    return f"{for_user} ¬∑ –¢–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è {random.choice(EMOJIS)}"

# /start /help  ‚Äî –æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ —É–±—Ä–∞–ª –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é f-—Å—Ç—Ä–æ–∫—É
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    uname = me.username  # –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –¥–æ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–æ inline
    msg = (
        "–Ø –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã.\n\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –¥–Ω—è: /komplinos\n"
    )
    await update.message.reply_text(msg)

# –û–±—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
async def _send_prediction(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    caption = make_caption(username_or_name(user))
    photo_url = random.choice(IMAGES)
    await update.message.reply_photo(photo=photo_url, caption=caption, parse_mode=ParseMode.HTML)

# /predict ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–∏–º
async def predict_cmd(update, context: ContextTypes.DEFAULT_TY
