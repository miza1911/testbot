import os
import random
from uuid import uuid4
from dotenv import load_dotenv

from telegram import (
    InlineQueryResultArticle,
    InputTextMessageContent,
    InputMediaPhoto,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
    ChosenInlineResultHandler,
)

# .env —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ; –Ω–∞ Fly –∏—Å–ø–æ–ª—å–∑—É–µ–º Secrets
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
EMOJIS = ["‚ú®", "üåü", "üçÄ", "üåà", "üí´", "üßø", "ü™Ñ", "üéâ", "‚òÄÔ∏è", "üå∏"]

def _load_images():
    env = (os.getenv("IMAGES") or "").strip()
    if env:
        return [u.strip() for u in env.split(",") if u.strip()]
    # –∑–∞–ø–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ IMAGES –Ω–µ –∑–∞–¥–∞–Ω
    return [
        "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee",
        "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429",
    ]

IMAGES = _load_images()
PREVIEW_URL = os.getenv("PREVIEW_URL") or IMAGES[0]  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é –≤ –∏–Ω–ª–∞–π–Ω-–æ–∫–Ω–µ

def username_or_name(user) -> str:
    if user.username:
        return f"@{user.username}"
    name = (user.first_name or "").strip() or "–ì–æ—Å—Ç—å"
    return name

def make_caption(for_user) -> str:
    return f"{for_user} ¬∑ –¢–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è {random.choice(EMOJIS)}"

def pick_random_photo() -> str:
    return random.choice(IMAGES)

# /start /help
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    uname = me.username
    msg = (
        f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ä—Ç–∏–Ω–∫—É-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —Ç–≤–æ–∏–º –∏–º–µ–Ω–µ–º.\n\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: /predict\n"
        f"‚Ä¢ Inline –≤ –ª—é–±–æ–º —á–∞—Ç–µ: –Ω–∞–ø–∏—à–∏ @{uname} –∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É."
    )
    await update.message.reply_text(msg)

# /predict ‚Äî —Å—Ä–∞–∑—É –ø—Ä–∏—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
async def predict_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_random_photo()
    await update.message.reply_photo(photo=photo_url, caption=caption, parse_mode=ParseMode.HTML)

# --- Inline ---
ARTICLE_ID = "predict_inline"

# 1) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –ø–ª–∏—Ç–∫—É —Å —Ç–≤–æ–∏–º –ø—Ä–µ–≤—å—é (PREVIEW_URL)
async def inline_query(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.inline_query.from_user
    print(f"INLINE query from @{user.username or user.id}")

    result = InlineQueryResultArticle(
        id=ARTICLE_ID,
        title="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
        description="–ù–∞–∂–º–∏ ‚Äî –∏ –ø—Ä–∏–¥–µ—Ç —Ç–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è!",
        input_message_content=InputTextMessageContent("‚è≥ –ü–æ–ª—É—á–∞—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ‚Ä¶"),
        thumbnail_url=PREVIEW_URL,  # –í–°–ï–ì–î–ê –æ–¥–Ω–æ –ø—Ä–µ–≤—å—é –∏–∑ —Å–µ–∫—Ä–µ—Ç–∞
    )

    await update.inline_query.answer([result], cache_time=0, is_personal=True)

# 2) –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ (—ç—Ñ—Ñ–µ–∫—Ç ¬´–∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /predict¬ª)
async def on_chosen_inline(update, context: ContextTypes.DEFAULT_TYPE):
    chosen = update.chosen_inline_result
    if not chosen or chosen.result_id != ARTICLE_ID:
        return
    if not chosen.inline_message_id:
        # —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π ‚Äî id –Ω–µ—Ç, —Ç–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        print("chosen_inline_result: no inline_message_id; skip edit")
        return

    user = chosen.from_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_random_photo()

    try:
        await context.bot.edit_message_media(
            inline_message_id=chosen.inline_message_id,
            media=InputMediaPhoto(media=photo_url, caption=caption, parse_mode=ParseMode.HTML),
        )
    except Exception as e:
        print(f"edit_message_media failed: {e}")

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets –Ω–∞ Fly")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CommandHandler("predict", predict_cmd))
    app.add_handler(InlineQueryHandler(inline_query))
    app.add_handler(ChosenInlineResultHandler(on_chosen_inline))  # <-- –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω

    print("Prediction bot is running‚Ä¶")
    app.run_polling(allowed_updates=["message", "inline_query", "chosen_inline_result"])

if __name__ == "__main__":
    main()
