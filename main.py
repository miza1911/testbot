import os
import random
from collections import deque, defaultdict
from uuid import uuid4
from dotenv import load_dotenv

from telegram import InlineQueryResultArticle, InputTextMessageContent, InputMediaPhoto
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
    ChosenInlineResultHandler,
)

# .env —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ; –Ω–∞ Fly –∏—Å–ø–æ–ª—å–∑—É–µ–º Secrets
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
EMOJIS = ["‚ú®", "üåü", "üçÄ", "üåà", "üí´", "üßø", "ü™Ñ", "üéâ", "‚òÄÔ∏è", "üå∏"]

def _load_images():
    env = (os.getenv("IMAGES") or "").strip()
    if env:
        return [u.strip() for u in env.split(",") if u.strip()]
    # –∑–∞–ø–∞—Å–Ω—ã–µ, –µ—Å–ª–∏ IMAGES –Ω–µ –∑–∞–¥–∞–Ω
    return [
        "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee",
        "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429",
    ]

IMAGES = _load_images()
PREVIEW_URL = os.getenv("PREVIEW_URL") or IMAGES[0]  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–µ–≤—å—é

# –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä—ã: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏
RECENT = defaultdict(lambda: deque(maxlen=3))

def username_or_name(user) -> str:
    if user.username:
        return f"@{user.username}"
    return (user.first_name or "–ì–æ—Å—Ç—å").strip() or "–ì–æ—Å—Ç—å"

def make_caption(for_user) -> str:
    return f"{for_user} ¬∑ –¢–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è {random.choice(EMOJIS)}"

def pick_photo_for(user_id: int) -> str:
    """–≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏–∑–±–µ–≥–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    recent = set(RECENT[user_id])
    candidates = [u for u in IMAGES if u not in recent] or IMAGES[:]  # –µ—Å–ª–∏ –≤—Å—ë –≤—ã—á–µ—Ä–∫–∏–≤–∞–µ—Ç—Å—è ‚Äî –±–µ—Ä–µ–º –ª—é–±—ã–µ
    choice = random.choice(candidates)
    RECENT[user_id].append(choice)
    return choice

# /start /help
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    uname = (await context.bot.get_me()).username
    msg = (
        f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ä—Ç–∏–Ω–∫—É-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —Ç–≤–æ–∏–º –∏–º–µ–Ω–µ–º.\n\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: /predict\n"
        f"‚Ä¢ Inline –≤ –ª—é–±–æ–º —á–∞—Ç–µ: –Ω–∞–ø–∏—à–∏ @{uname} –∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É."
    )
    await update.message.reply_text(msg)

# /predict ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
async def predict_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_photo_for(user.id)
    await update.message.reply_photo(photo=photo_url, caption=caption, parse_mode=ParseMode.HTML)

# INLINE: –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π (PREVIEW_URL).
# –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç-–∑–∞–≥–ª—É—à–∫–∞, –∑–∞—Ç–µ–º –º—ã –∑–∞–º–µ–Ω–∏–º –µ—ë –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
ARTICLE_ID = "predict_inline"

async def inline_query(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.inline_query.from_user
    print(f"INLINE query from @{user.username or user.id}")

    result = InlineQueryResultArticle(
        id=ARTICLE_ID,
        title="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
        description="–ù–∞–∂–º–∏ ‚Äî –∏ –ø—Ä–∏–¥–µ—Ç —Ç–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è!",
        input_message_content=InputTextMessageContent("‚è≥ –ü–æ–ª—É—á–∞—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ‚Ä¶"),
        thumbnail_url=PREVIEW_URL,  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ
    )

    await update.inline_query.answer([result], cache_time=0, is_personal=True)

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç–æ—á–∫—É ‚Äî –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
async def on_chosen_inline(update, context: ContextTypes.DEFAULT_TYPE):
    chosen = update.chosen_inline_result
    if not chosen or chosen.result_id != ARTICLE_ID:
        return
    inline_msg_id = chosen.inline_message_id
    if not inline_msg_id:
        # –í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—é—Ç id ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º —Ç–∏—Ö–æ
        print("chosen_inline_result: no inline_message_id; skip edit")
        return

    user = chosen.from_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_photo_for(user.id)

    try:
        await context.bot.edit_message_media(
            inline_message_id=inline_msg_id,
            media=InputMediaPhoto(media=photo_url, caption=caption, parse_mode=ParseMode.HTML),
        )
    except Exception as e:
        print(f"edit_message_media failed: {e}")

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets –Ω–∞ Fly")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CommandHandler("predict", predict_cmd))
    app.add_handler(InlineQueryHandler(inline_query))
    app.add_handler(ChosenInlineResultHandler(on_chosen_inline))  # –≤–∞–∂–µ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ

    print("Prediction bot is running‚Ä¶")
    app.run_polling(allowed_updates=["message", "inline_query", "chosen_inline_result"])

if __name__ == "__main__":
    main()
