import os
import random
from uuid import uuid4
from dotenv import load_dotenv

from telegram import (
    InlineQueryResultArticle,
    InputTextMessageContent,
    InputMediaPhoto,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
    ChosenInlineResultHandler,
    CallbackQueryHandler,
)

# .env ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª–∏; –Ω–∞ Fly –∏—Å–ø–æ–ª—å–∑—É–µ–º Secrets
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
EMOJIS = ["‚ú®", "üåü", "üçÄ", "üåà", "üí´", "üßø", "ü™Ñ", "üéâ", "‚òÄÔ∏è", "üå∏"]

def _load_images():
    env = (os.getenv("IMAGES") or "").strip()
    if env:
        return [u.strip() for u in env.split(",") if u.strip()]
    return [
        "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee",
        "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429",
    ]

IMAGES = _load_images()
PREVIEW_URL = os.getenv("PREVIEW_URL") or IMAGES[0]

def username_or_name(user) -> str:
    if user.username:
        return f"@{user.username}"
    name = (user.first_name or "").strip() or "–ì–æ—Å—Ç—å"
    return name

def make_caption(for_user) -> str:
    return f"{for_user} ¬∑ –¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! {random.choice(EMOJIS)}"

def pick_random_photo() -> str:
    # –ª—ë–≥–∫–∏–π –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä: –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ URL –¥–≤–∞–∂–¥—ã –ø–æ–¥—Ä—è–¥
    last = getattr(pick_random_photo, "_last", None)
    pool = [u for u in IMAGES if u != last] or IMAGES
    url = random.choice(pool)
    pick_random_photo._last = url
    return url

# /start /help
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    uname = me.username
    msg = (
        "–ü—Ä–∏–≤–µ—Ç, —Å–∞–ª–∞–º, –±–æ–Ω–∂—É—Ä! –Ø —É–º–µ—é –¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã. –°—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è!üå∏ \n\n"
        "‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞: /nos\n"
        
    )
    await update.message.reply_text(msg)

# /predict ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
async def predict_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_random_photo()
    await update.message.reply_photo(photo=photo_url, caption=caption, parse_mode=ParseMode.HTML)

# ---------- INLINE ----------
ARTICLE_ID = "predict_inline"
BTN_PAYLOAD = "go_predict"

# 1) –í–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –û–î–ù–£ –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–µ–≤—å—é
async def inline_query(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.inline_query.from_user
    print(f"INLINE query from @{user.username or user.id}")

    result = InlineQueryResultArticle(
        id=ARTICLE_ID,
        title="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è",
        description="–ù–∞–∂–º–∏ ‚Äî –∏ –ø—Ä–∏–¥–µ—Ç —Ç–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç!",
        input_message_content=InputTextMessageContent("‚è≥ –ü–æ–ª—É—á–∞—é –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç‚Ä¶"),
        thumbnail_url=PREVIEW_URL,  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é –∏–∑ —Å–µ–∫—Ä–µ—Ç–∞
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=BTN_PAYLOAD)]]
        ),
    )
    await update.inline_query.answer([result], cache_time=0, is_personal=True)

# 2–ê) –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å: Telegram –ø—Ä–∏—Å–ª–∞–ª chosen_inline_result ‚Üí –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ (1 —Ç–∞–ø)
async def on_chosen_inline(update, context: ContextTypes.DEFAULT_TYPE):
    chosen = update.chosen_inline_result
    if not chosen or chosen.result_id != ARTICLE_ID:
        return
    if not chosen.inline_message_id:
        print("chosen_inline_result: no inline_message_id; skip edit")
        return

    user = chosen.from_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_random_photo()

    try:
        await context.bot.edit_message_media(
            inline_message_id=chosen.inline_message_id,
            media=InputMediaPhoto(media=photo_url, caption=caption, parse_mode=ParseMode.HTML),
            reply_markup=None,  # —É–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
        )
    except Exception as e:
        print(f"edit_message_media (chosen) failed: {e}")

# 2–ë) –ó–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å: –µ—Å–ª–∏ chosen_inline_result –Ω–µ –ø—Ä–∏—à—ë–ª ‚Äî –∂–º—ë–º –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–µ–π—á–∞—Å¬ª
async def on_callback(update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q or q.data != BTN_PAYLOAD:
        return

    user = q.from_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_random_photo()

    try:
        await q.edit_message_media(
            media=InputMediaPhoto(media=photo_url, caption=caption, parse_mode=ParseMode.HTML)
        )
    except Exception as e:
        print(f"edit_message_media (callback) failed: {e}")

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets –Ω–∞ Fly")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CommandHandler(["nos", "predict"], predict_cmd))
    app.add_handler(InlineQueryHandler(inline_query))
    app.add_handler(ChosenInlineResultHandler(on_chosen_inline))     # 1-—Ç–∞–ø —Å—Ü–µ–Ω–∞—Ä–∏–π
    app.add_handler(CallbackQueryHandler(on_callback))               # –∑–∞–ø–∞—Å–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π

    print("Prediction bot is running‚Ä¶")
    app.run_polling(allowed_updates=["message", "inline_query", "chosen_inline_result", "callback_query"])

if __name__ == "__main__":
    main()

