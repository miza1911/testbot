import os
import random
from dotenv import load_dotenv

from telegram import (
    InlineQueryResultPhoto,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
)

# .env ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª–∏; –Ω–∞ Fly –∏—Å–ø–æ–ª—å–∑—É–µ–º Secrets
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
EMOJIS = ["‚ú®", "üåü", "üçÄ", "üåà", "üí´", "üßø", "ü™Ñ", "üéâ", "‚òÄÔ∏è", "üå∏"]

def _load_images():
    env = (os.getenv("IMAGES") or "").strip()
    if env:
        return [u.strip() for u in env.split(",") if u.strip()]
    # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–∞–≤–∞—Ç—å –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Unsplash —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    return [
        "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee",
        "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429",
    ]

IMAGES = _load_images()
PREVIEW_URL = os.getenv("PREVIEW_URL") or IMAGES[0]

def username_or_name(user) -> str:
    if user.username:
        return f"@{user.username}"
    name = (user.first_name or "").strip() or "–ì–æ—Å—Ç—å"
    return name

def make_caption(for_user) -> str:
    import random
    return f"{for_user} ¬∑ –¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! {random.choice(EMOJIS)}"

def pick_random_photo() -> str:
    import random
    last = getattr(pick_random_photo, "_last", None)
    pool = [u for u in IMAGES if u != last] or IMAGES
    url = random.choice(pool)
    pick_random_photo._last = url
    return url

# /start /help
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "–ü—Ä–∏–≤–µ—Ç, —Å–∞–ª–∞–º, –±–æ–Ω–∂—É—Ä! –Ø —É–º–µ—é –¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã. –°—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è!üå∏ \n\n"
        "‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞: /nos\n"
    )
    await update.message.reply_text(msg)

# /predict ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
async def predict_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    caption = make_caption(username_or_name(user))
    photo_url = pick_random_photo()
    await update.message.reply_photo(photo=photo_url, caption=caption, parse_mode=ParseMode.HTML)

# ---------- INLINE ----------
ARTICLE_ID = "predict_inline_photo"

async def inline_query(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.inline_query.from_user
    print(f"INLINE query from @{user.username or user.id}")

    photo_url = pick_random_photo()
    caption = make_caption(username_or_name(user))

    # –°—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º —Ñ–æ—Ç–æ ‚Äî –±–µ–∑ ¬´–ø–æ–ª—É—á–∞—é‚Ä¶¬ª –∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    result = InlineQueryResultPhoto(
        id=ARTICLE_ID,
        photo_url=photo_url,
        thumbnail_url=PREVIEW_URL,
        caption=caption,
        parse_mode=ParseMode.HTML,
        title="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! üéâ",  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        description="–ù–∞–∂–º–∏ ‚Äî –∏ —Å—Ä–∞–∑—É –ø—Ä–∏–¥—ë—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç",
    )
    await update.inline_query.answer([result], cache_time=0, is_personal=True)

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets –Ω–∞ Fly")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CommandHandler(["nos", "predict"], predict_cmd))
    app.add_handler(InlineQueryHandler(inline_query))

    print("Prediction bot is running‚Ä¶")
    app.run_polling(allowed_updates=["message", "inline_query"])

if __name__ == "__main__":
    main()

