import os
import random
from uuid import uuid4
from dotenv import load_dotenv

# --- –∏–º–ø–æ—Ä—Ç—ã (—É–±—Ä–∞–ª –¥—É–±–ª–∏) ---
from telegram import InlineQueryResultArticle, InputTextMessageContent, InputMediaPhoto
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
    ChosenInlineResultHandler,
)

# –î–ª—è –ª–æ–∫–∞–ª–∫–∏ —á–∏—Ç–∞–µ–º .env; –Ω–∞ Fly –∏—Å–ø–æ–ª—å–∑—É–µ–º Secrets
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
EMOJIS = ["‚ú®", "üåü", "üçÄ", "üåà", "üí´", "üßø", "ü™Ñ", "üéâ", "‚òÄÔ∏è", "üå∏"]

def _load_images():
    env = (os.getenv("IMAGES") or "").strip()
    if env:
        return [u.strip() for u in env.split(",") if u.strip()]
    # –∑–∞–ø–∞—Å–Ω—ã–µ, –ª—É—á—à–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ —á–µ—Ä–µ–∑ IMAGES
    return [
        "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee",
        "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429",
    ]

IMAGES = _load_images()

# –ü—Ä–µ–≤—å—é –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞: –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–º PREVIEW_URL,
# –∏–Ω–∞—á–µ –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ IMAGES.
PREVIEW_URL = os.getenv("PREVIEW_URL") or (IMAGES[0] if IMAGES else None)

def username_or_name(user) -> str:
    if user.username:
        return f"@{user.username}"
    name = (user.first_name or "").strip() or "–ì–æ—Å—Ç—å"
    return name

def make_caption(for_user) -> str:
    return f"{for_user} ¬∑ –¢–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è {random.choice(EMOJIS)}"

# /start /help
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    uname = me.username
    msg = (
        "–Ø –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã.\n\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –¥–Ω—è: /komplinos\n"
        
    )
    await update.message.reply_text(msg)

# –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
async def _send_prediction(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    caption = make_caption(username_or_name(user))
    photo_url = random.choice(IMAGES)
    await update.message.reply_photo(photo=photo_url, caption=caption, parse_mode=ParseMode.HTML)

# /predict ‚Äî –æ—Å—Ç–∞–≤–∏–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ —Ç—ã –µ—ë —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª)
async def predict_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    await _send_prediction(update, context)

# /komplinos ‚Äî –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
async def komplinos_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    await _send_prediction(update, context)

# INLINE: –æ–¥–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø–ª–∏—Ç–∫–∞ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π (–ø—Ä–µ–≤—å—é), –ø—Ä–∏ –∫–ª–∏–∫–µ ‚Äî —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ
ARTICLE_ID = "predict_inline"

async def inline_query(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.inline_query.from_user
    print(f"INLINE query from @{user.username or user.id}")

    result_article = InlineQueryResultArticle(
        id=ARTICLE_ID,
        title="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
        description="–ù–∞–∂–º–∏ ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è!",
        input_message_content=InputTextMessageContent("‚è≥ –ü–æ–ª—É—á–∞—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ‚Ä¶"),
        thumbnail_url=PREVIEW_URL if PREVIEW_URL else None,  # –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤–æ –≤—Å–ø–ª—ã–≤–∞—à–∫–µ
    )

    await update.inline_query.answer([result_article], cache_time=0, is_personal=True)

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–ª–∏—Ç–∫—É ‚Äî –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
async def on_chosen_inline(update, context: ContextTypes.DEFAULT_TYPE):
    chosen = update.chosen_inline_result
    if not chosen or chosen.result_id != ARTICLE_ID:
        return

    inline_msg_id = chosen.inline_message_id
    user = chosen.from_user
    caption = make_caption(username_or_name(user))
    photo_url = random.choice(IMAGES)

    try:
        await context.bot.edit_message_media(
            inline_message_id=inline_msg_id,
            media=InputMediaPhoto(media=photo_url, caption=caption, parse_mode=ParseMode.HTML),
        )
        print(f"INLINE converted to random photo for @{user.username or user.id}")
    except Exception as e:
        print(f"edit_message_media failed: {e}")

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets –Ω–∞ Fly")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CommandHandler("predict", predict_cmd))     # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    app.add_handler(CommandHandler("komplinos", komplinos_cmd)) # —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    app.add_handler(InlineQueryHandler(inline_query))
    app.add_handler(ChosenInlineResultHandler(on_chosen_inline))

    print("Prediction bot is running‚Ä¶")
    app.run_polling(allowed_updates=["message", "inline_query", "chosen_inline_result"])

if __name__ == "__main__":
    main()
